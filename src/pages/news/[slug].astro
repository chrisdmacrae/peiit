---
import { CollectionEntry, getCollection, getEntryBySlug } from "astro:content"
import TableOfContents from "../../components/TableOfContents.astro";
import Breadcrumb from "../../components/Breadcrumb.astro";
import Footer from "../../components/Footer.astro";
import Nav from "../../components/Nav.astro";
import typography from "../../content/typography";
import Layout from "../../layout/Layout.astro";
import type { NewsItem } from "./index.astro";
import Lines from "../../components/Lines.astro";

export async function getStaticPaths() {
  const profiles = await getCollection('profiles')
  const news = await getCollection('news')
  const items = [...profiles, ...news]
    .map(i => ({ 
      slug: i.slug, 
      type: 'photo' in i.data ? 'profiles' : 'news' as NewsItem['type']
    }))

  const pages = await Promise.all(items.map(async item => {
    const page = await getEntryBySlug(item.type, item.slug) as CollectionEntry<"profiles"> | CollectionEntry<"news"> | undefined

    if (!page) return null

    return page
  }))

  return pages
    .filter(p => p !== null)
    .map(page => ({ params: { slug: page!.slug }, props: { page } }))
}

const { page: { data, render } } = Astro.props;
const { Content, headings } = await render()
const url = Astro.url

export const prerender = true
---
<Layout title={data.title} description={data.description} {...data.meta}>
    
  <div class="bg-gradient-to-b from-slate-200 to-slate-50 dark:from-slate-900 dark:to-slate-800" slot="header">
    <Nav />
    
    <div class="relative">
      <header class="max-w-[70rem] mx-auto md:min-h-[calc(100vh-32rem)] p-8 mx-auto flex flex-row items-end">
        <div class="absolute -bottom-6 right-0 w-96 h-96">
          <Lines />
        </div>

        <div class="xl:basis-[18rem]" />
        <div class="relative flex-1 max-w-[50rem]">
          <h1 class="text-3xl md:text-4xl lg:text-5xl font-bold text-slate-800 dark:text-slate-100 font-mono">{data.title}</h1>
          <h2 class="text-lg md:text-2xl text-slate-500 dark:text-slate-100 font-mono">
            {data.description}
          </h2>
          <div class="relative max-w-[50rem]">
            <div class="absolute z-10 top-[7px] xl:left-1 w-[50px] h-[50px] bg-slate-800 dark:bg-slate-100 rounded-full flex flex-col justify-center items-center text-slate-100 dark:text-slate-800">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="relative top-1 w-6 h-6 animate-bounce">
                <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 17.25L12 21m0 0l-3.75-3.75M12 21V3" />
              </svg>      
            </div>
          </div>
        </div>
      </header>
    </div>
  </div>

  <div class="flex flex-wrap flex-col md:flex-row gap-6 max-w-[70rem] mx-auto p-8 md:py-16">
    <div class="flex-1 basis-full">
      <Breadcrumb>
        <li class="inline-flex items-center">
          <a href="/news" class="inline-flex items-center text-sm font-medium text-gray-700 hover:text-blue-600 dark:text-gray-400 dark:hover:text-white">
            <svg aria-hidden="true" class="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path></svg>
            News
          </a>
        </li>
      </Breadcrumb>
    </div>
    <div class="flex-1 flex flex-col grow-0 md:basis-[16rem] gap-10">
      {headings && headings.length > 0 && (
        <TableOfContents headings={headings} url={url} />
      )}
    </div>
    <div class="flex-1 flex flex-col gap-10">
      <div class="flex flex-col gap-2 text-slate-800 dark:text-slate-200 leading-loose text-lg box-content">
        <Content components={typography} />
      </div>
    </div>
  </div>

  <Footer />
</Layout>