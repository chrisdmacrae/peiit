---
import { CollectionEntry, getCollection } from "astro:content"
import TableOfContents from "../components/TableOfContents.astro";
import Breadcrumb from "../components/Breadcrumb.astro";
import Footer from "../components/Footer.astro";
import Nav from "../components/Nav.astro";
import typography from "../content/typography";
import Layout from "../layout/Layout.astro";
import Lines from "../components/Lines";

export interface Props {
  page: CollectionEntry<'pages'>,
  subPages: CollectionEntry<'pages'>[]
}

export async function getStaticPaths() {
  const pages = await getCollection('pages')

  return pages.map(page => {
    const pageParts = page.slug.split("/")
    const base = pageParts.length > 1 ? pageParts.join("/") : pageParts.splice(0, pageParts.length).join('/')
    const subPages = pages
      .filter(p => p.slug !== page.slug)
      .filter(page => page.slug.includes(base))

    return {
      params: { slug: page.slug }, props: { page, subPages }
    }
  })
}

const { page: { data, render }, subPages } = Astro.props;
const { Content, headings } = await render()
const url = Astro.url

export const prerender = true
---
<Layout title={data.title} description={data.description} {...data.meta}>
  <div class="bg-gradient-to-b from-slate-200 to-slate-50 dark:from-slate-900 dark:to-slate-800" slot="header">
    <Nav />
    
    <div class="relative">
      <header class="max-w-[70rem] mx-auto md:min-h-[calc(100vh-32rem)] p-8 mx-auto flex flex-row items-end">
        <div class="absolute -bottom-6 right-0 w-96 h-96">
          <Lines />
        </div>

        <div class="xl:basis-[18rem]" />
        <div class="relative max-w-[50rem] absolute bottom-0">
          <h1 class="text-3xl md:text-4xl lg:text-5xl font-bold text-slate-800 dark:text-slate-100 font-mono">{data.title}</h1>
          <h2 class="text-lg md:text-2xl text-slate-500 dark:text-slate-100 font-mono">
            {data.description}
          </h2>
          <div class="relative max-w-[50rem]">
            <div class="absolute z-10 top-[7px] left-8 xl:left-1 w-[50px] h-[50px] bg-slate-800 dark:bg-slate-100 rounded-full flex flex-col justify-center items-center text-slate-100 dark:text-slate-800">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="relative top-1 w-6 h-6 animate-bounce">
                <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 17.25L12 21m0 0l-3.75-3.75M12 21V3" />
              </svg>      
            </div>
          </div>
        </div>
      </header>
    </div>
  </div>

  <div class="flex flex-wrap flex-col md:flex-row gap-6 max-w-[70rem] mx-auto p-8 md:py-16">
    <div class="flex-1 basis-full">
      <Breadcrumb />
    </div>
    <div class="flex-1 flex flex-col grow-0 md:basis-[16rem] gap-10">
      {headings && headings.length > 0 && (
        <TableOfContents headings={headings} url={url} />
      )}

      {subPages && subPages.length > 0 && (
        <aside class="hidden md:block">
          <h3 class="font-mono text-md font-bold text-slate-500">More</h3>
          <ol class="flex flex-col gap-2 font-mono text-sm font-bold text-slate-800 dark:text-slate-200">
            {subPages.map(page => (
              <a href={`/${page.slug}`}>
                <li>{page.data.title}</li>
              </a>
            ))}
            {data.externalPages?.map(page => (
              <a href={page.url}>
                <li>{page.title}</li>
              </a>
            ))}
          </ol>
        </aside>
      )}
    </div>
    <div class="flex-1 flex flex-col gap-10">
      <div class="flex flex-col gap-2 text-slate-800 dark:text-slate-200 leading-loose text-lg">
        <Content components={typography} />
      </div>
      {subPages && subPages.length > 0 && (
        <aside class="block md:hidden">
          <h3 class="font-mono text-md font-bold text-slate-500">More</h3>
          <ol class="flex flex-col gap-2 font-mono text-sm font-bold text-slate-800 dark:text-slate-200">
            {subPages.map(page => (
              <a href={`/${page.slug}`}>
                <li>{page.data.title}</li>
              </a>
            ))}
            {data.externalPages?.map(page => (
              <a href={page.url}>
                <li>{page.title}</li>
              </a>
            ))}
          </ol>
        </aside>
      )}
    </div>
  </div>

  <Footer />
</Layout>